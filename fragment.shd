#version 450

in vec2 uv_frag;
in vec3 Normal;
in vec3 FragPos;

uniform sampler2D texture_sampler;
uniform vec3 light_pos;
uniform vec3 cam_pos;

layout(location=0) out vec4 output_color;

vec3 object_color = vec3(1.0, 1.0, 1.0);
vec3 light_color = vec3(1.0, 1.0, 1.0);

float ambientStrength = 0.1;
float specularStrength = 0.5;

void main() {
    vec3 ambient = ambientStrength * light_color;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(light_pos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * light_color; 

    vec3 viewDir = normalize(cam_pos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(cam_pos, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * light_color;

    vec3 res = (ambient + diffuse) * object_color;
    output_color = vec4(res, 1.0f) * texture(texture_sampler, uv_frag);
}
